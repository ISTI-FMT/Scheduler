
#include "stdafx.h"
#include "stdafx.h"
using namespace Microsoft::VisualStudio::TestTools::UnitTesting;
namespace SchedulerATSTest {
	using namespace System;
	using namespace System::Threading;
	using namespace System::Threading::Tasks;
	using namespace System::Net::Sockets;
	using namespace System::Net;
	ref class ThreadListenerATC_IXLTest;


	/// <summary>
	///Classe di test per ThreadListenerATC_IXLTest.
	///Creata per contenere tutti gli unit test ThreadListenerATC_IXLTest
	///</summary>
	[TestClass]
	public ref class ThreadListenerATC_IXLTest
	{

	private: array<Byte>^fromString(String ^msg){
				 int len = ( msg->Length / 2)+(msg->Length%2);//+1;
				 array<Byte>^sendBytes = gcnew array<Byte>(len);
				 for (int i = 0; i < sendBytes->Length; i++)
				 {
					 String ^str = msg->Substring(i *2, 2);
					 int h =str->Length;
					 if(h>1){
						 sendBytes[i] = Byte::Parse(str,System::Globalization::NumberStyles::HexNumber);
					 }
				 }
				 return sendBytes;
			 };

			 Microsoft::VisualStudio::TestTools::UnitTesting::TestContext^  testContextInstance;
			 /// <summary>
			 ///Ottiene o imposta il contesto dei test, che fornisce
			 ///funzionalità e informazioni sull'esecuzione dei test corrente.
			 ///</summary>
	public: property Microsoft::VisualStudio::TestTools::UnitTesting::TestContext^  TestContext
			{
				Microsoft::VisualStudio::TestTools::UnitTesting::TestContext^  get()
				{
					return testContextInstance;
				}
				System::Void set(Microsoft::VisualStudio::TestTools::UnitTesting::TestContext^  value)
				{
					testContextInstance = value;
				}
			}

#pragma region Attributi di test aggiuntivi
			// 
			//Durante la scrittura dei test è possibile utilizzare i seguenti attributi aggiuntivi:
			//
			//Utilizzare ClassInitialize per eseguire il codice prima di eseguire il primo test della classe
			//public: [ClassInitialize]
			//static System::Void MyClassInitialize(TestContext^  testContext)
			//{
			//}
			//
			//Utilizzare ClassCleanup per eseguire il codice dopo l'esecuzione di tutti i test di una classe
			//public: [ClassCleanup]
			//static System::Void MyClassCleanup()
			//{
			//}
			//
			//Utilizzare TestInitialize per eseguire il codice prima di eseguire ciascun test
			//
			//public: [TestInitialize]
			//System::Void MyTestInitialize()
			//{
			//}
			//Utilizzare TestCleanup per eseguire il codice dopo l'esecuzione di ciascun test
			//public: [TestCleanup]
			//System::Void MyTestCleanup()
			//{
			//}
			//
#pragma endregion
			/// <summary>
			///Test per Costruttore ThreadListenerATC_IXL
			///</summary>
	public: [TestMethod]
			void ThreadListenerATC_IXLConstructorTest()
			{
				ManagerStatoLineaIXL^  MC = gcnew ManagerStatoLineaIXL();
				ManagerStatoLineaATC^  MA = gcnew ManagerStatoLineaATC();
				ThreadListenerATC_IXL^  target = (gcnew ThreadListenerATC_IXL(MC, MA));
				Thread^ oThreadUDP = gcnew Thread( gcnew ThreadStart( target, &ThreadListenerATC_IXL::UDP_Management_receive ) );

				oThreadUDP->Start();

				String ^msg
				String ^msg
				array<Byte> ^sendBytes = fromString(msgIXL);
				array<Byte> ^sendBytes2 = fromString(msgIXL2);
				Messaggi ^sds = gcnew Messaggi();
				sds->deserialize(sendBytes2);

				Socket ^s = gcnew Socket(System::Net::Sockets::AddressFamily::InterNetwork, System::Net::Sockets::SocketType::Dgram,
					System::Net::Sockets::ProtocolType::Udp);

				IPAddress ^broadcast = IPAddress::Parse("127.0.0.1");
				IPEndPoint ^ep = gcnew IPEndPoint(broadcast, 4010);

				s->SendTo( sendBytes, ep);
				s->SendTo( sendBytes2, ep);
				s->SendTo( sendBytes2, ep);
				
				s->Close();
				
				 Thread::Sleep(1000);
				 target->RequestStop();
				  Thread::Sleep(200);
			}
			/// <summary>
			///Test per Costruttore ThreadListenerATC_IXL
			///</summary>
	public: [TestMethod]
			void ThreadListenerATC_IXLConstructorTest2()
			{
				ManagerStatoLineaIXL^  MC = gcnew ManagerStatoLineaIXL();
				ManagerStatoLineaATC^  MA = gcnew ManagerStatoLineaATC();
				ThreadListenerATC_IXL^  target = (gcnew ThreadListenerATC_IXL(MC, MA));
				Thread^ oThreadUDP = gcnew Thread( gcnew ThreadStart( target, &ThreadListenerATC_IXL::UDP_Management_receive ) );

				oThreadUDP->Start();

				
				String ^msgATC  ="0B0A8000000411A265000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
				String ^msgATC2  ="0B022000000411A00B0000FF0000000480000033F600050001004F00000495000043970000000000000000000000000000FF24000004820000283D0000FF020000047F0000300F0001000F0000000000003FAD0000000000000000000000000000000000000000000000000000";
				array<Byte> ^sendBytes = fromString(msgATC);
				array<Byte> ^sendBytes2 = fromString(msgATC2);

				Socket ^s = gcnew Socket(System::Net::Sockets::AddressFamily::InterNetwork, System::Net::Sockets::SocketType::Dgram,
					System::Net::Sockets::ProtocolType::Udp);

				IPAddress ^broadcast = IPAddress::Parse("127.0.0.1");
				IPEndPoint ^ep = gcnew IPEndPoint(broadcast, 4010);

				s->SendTo( sendBytes2, ep);
				s->SendTo( sendBytes2, ep);
				s->SendTo( sendBytes2, ep);
				s->SendTo( sendBytes2, ep);
				s->SendTo( sendBytes, ep);


				s->Close();
				 Thread::Sleep(1000);
				 target->RequestStop();
				  Thread::Sleep(200);
			}
			/// <summary>
			///Test per ConfrontaArrayByte
			///</summary>
	public: [TestMethod]
			void ConfrontaArrayByteTest()
			{
				String ^msg
				array<Byte> ^ A= fromString(msg);
				array< Byte >^  B = fromString(msg);
				bool expected = true; 
				bool actual= ThreadListenerATC_IXL::ConfrontaArrayByte(A, B);
				Assert::AreEqual(expected, actual);

				msg
				 B = fromString(msg);
				expected = false; 
				 actual= ThreadListenerATC_IXL::ConfrontaArrayByte(A, B);
				Assert::AreEqual(expected, actual);


			}
	};
}
namespace SchedulerATSTest {

}
